// This file defines the classes for each Person-type and the methods used to randomize values for an individual
// person, but not the generation of people within the context of a family.

class Person {
// Person base class contains the basic elements for the engine to add family members. This class shouldn't exist outside of
// this file.
  constructor(ageGroup, firstName, lastName, gender, insured = false) {
    this.ageGroup = ageGroup; //string value, should ALWAYS be set to the classname
    this.firstName = firstName; //string value, generated by Faker
    this.lastName = lastName; //string value, generated by Faker and shared for a family
    this.gender = gender; //string, determines pronouns for stories
    this.insured = insured; //boolean value, affects and affected by events
  }
}

export class Adult extends Person {
//The Adult class will typically be the primary member added to a family. This class represents individuals between
// 22 and 64 years old.
  constructor(ageGroup, firstName, lastName, gender, insured = false, employed = false, disabled = false, hasChild = false) {
    super(ageGroup, firstName, lastName, gender, insured);
    this.employed = employed; //boolean value, affects and affected by events
    this.disabled = disabled; //boolean value, affects events
    this.hasChild = hasChild; //boolean value, affects events
  }
}

export class Child extends Person {
// The Child class generates after a family has at least 1 Adult present. This class represents individuals under 18 years old.
// Fires child-specific events.
  constructor(ageGroup, firstName, lastName, gender, insured = false, infant = false) {
    super(ageGroup, firstName, lastName, gender, insured)
    this.infant = infant; // boolean value.
  }
}

export class Senior extends Person {
// The Senior class can also be the primary member added to a family. This class represents individuals 65 and over.
// Fires Senior-specific events.
  constructor(ageGroup, firstName, lastName, gender, insured = false, disabled = false) {
    super(ageGroup, firstName, lastName, gender, insured);
    this.disabled = disabled; //boolean value, affects events
  }
}

export function determineGender() {
  // This method randomizes gender by 50%. We need to assign a 1 or 0 so that Faker can use gender specific names.
  return Math.floor(Math.random() * 2)
}

export function determineInsured() {
  // This method randomizes whether or not the individual is insured. If the expression returns any
  // number over 90, the individual will be un-insured (In 2016, there were about 27.3 million people
  // 8.6 percent of the population) who lacked health insurance)
  return Math.floor(Math.random() * 101) < 90
}

export function determinedEmployment() {
  // This method randomizes whether or not the individual is employed. The game doesn't account for how much income a
  // family member generates, just whether or not they are employed. Although census data points to a 3.9% unemployment
  // rate, the ratio here is 10% for the sake of the game.
  return Math.floor(Math.random() * 101) < 90
}

export function determineDisabled() {
  // This method randomizes whether or not the individual is disabled. If the expression returns any
  // number over 91, the individual will be disabled (About 56.7 million people — 19 percent of the population — had
  // a disability in 2010, according to a broad definition of disability, with more than half of them reporting the
  // disability was severe, according to a comprehensive report on this population released today by the U.S. Census
  // Bureau. We're using the 'severe' disability value here.)
  return Math.floor(Math.random() * 101) > 91
}